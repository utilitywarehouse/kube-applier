// Code generated by MockGen. DO NOT EDIT.
// Source: git/gitutil.go

// Package git is a generated GoMock package.
package git

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUtilInterface is a mock of UtilInterface interface
type MockUtilInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUtilInterfaceMockRecorder
}

// MockUtilInterfaceMockRecorder is the mock recorder for MockUtilInterface
type MockUtilInterfaceMockRecorder struct {
	mock *MockUtilInterface
}

// NewMockUtilInterface creates a new mock instance
func NewMockUtilInterface(ctrl *gomock.Controller) *MockUtilInterface {
	mock := &MockUtilInterface{ctrl: ctrl}
	mock.recorder = &MockUtilInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUtilInterface) EXPECT() *MockUtilInterfaceMockRecorder {
	return m.recorder
}

// HeadHash mocks base method
func (m *MockUtilInterface) HeadHash() (string, error) {
	ret := m.ctrl.Call(m, "HeadHash")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeadHash indicates an expected call of HeadHash
func (mr *MockUtilInterfaceMockRecorder) HeadHash() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadHash", reflect.TypeOf((*MockUtilInterface)(nil).HeadHash))
}

// HeadCommitLog mocks base method
func (m *MockUtilInterface) HeadCommitLog() (string, error) {
	ret := m.ctrl.Call(m, "HeadCommitLog")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeadCommitLog indicates an expected call of HeadCommitLog
func (mr *MockUtilInterfaceMockRecorder) HeadCommitLog() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadCommitLog", reflect.TypeOf((*MockUtilInterface)(nil).HeadCommitLog))
}
