// Code generated by MockGen. DO NOT EDIT.
// Source: sysutil/clock.go

// Package sysutil is a generated GoMock package.
package sysutil

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockClockInterface is a mock of ClockInterface interface
type MockClockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClockInterfaceMockRecorder
}

// MockClockInterfaceMockRecorder is the mock recorder for MockClockInterface
type MockClockInterfaceMockRecorder struct {
	mock *MockClockInterface
}

// NewMockClockInterface creates a new mock instance
func NewMockClockInterface(ctrl *gomock.Controller) *MockClockInterface {
	mock := &MockClockInterface{ctrl: ctrl}
	mock.recorder = &MockClockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClockInterface) EXPECT() *MockClockInterfaceMockRecorder {
	return m.recorder
}

// Now mocks base method
func (m *MockClockInterface) Now() time.Time {
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Now indicates an expected call of Now
func (mr *MockClockInterfaceMockRecorder) Now() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockClockInterface)(nil).Now))
}

// Since mocks base method
func (m *MockClockInterface) Since(arg0 time.Time) time.Duration {
	ret := m.ctrl.Call(m, "Since", arg0)
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// Since indicates an expected call of Since
func (mr *MockClockInterfaceMockRecorder) Since(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Since", reflect.TypeOf((*MockClockInterface)(nil).Since), arg0)
}

// Sleep mocks base method
func (m *MockClockInterface) Sleep(arg0 time.Duration) {
	m.ctrl.Call(m, "Sleep", arg0)
}

// Sleep indicates an expected call of Sleep
func (mr *MockClockInterfaceMockRecorder) Sleep(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sleep", reflect.TypeOf((*MockClockInterface)(nil).Sleep), arg0)
}
